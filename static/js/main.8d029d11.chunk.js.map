{"version":3,"sources":["config.js","components/MovieItem.jsx","utils/useOnScreen.js","components/Datagrid.jsx","components/App.jsx","serviceWorker.js","theme.js","index.js"],"names":["IMAGEAPI","monthShort","withStyles","theme","container","position","width","opacity","breakpoints","down","height","image","maxWidth","borderStyle","border","palette","primary","main","maxHeight","title","textAlign","color","fontWeight","fontSize","marginTop","selected","release","background","borderRadius","display","justifyContent","alignItems","flexDirection","padding","top","right","ratings","bottom","imageContainer","itemDetails","layer","thumb","marginRight","votes","playButton","cursor","props","ref","useRef","classes","data","onSelect","selectedData","thisdate","Date","givenDate","element","isThisYear","getFullYear","onScreen","rootMargin","useState","isIntersecting","setIntersecting","useEffect","observer","IntersectionObserver","entry","current","observe","unobserve","useOnScreen","className","e","id","Fragment","getDate","getMonth","onClick","ReactDOM","findDOMNode","src","EventCode","process","alt","EventImageCode","clsx","Datagrid","React","forwardRef","list","lastElofRow","videoId","split","ampersandPosition","indexOf","substring","videoSrc","Grid","justify","spacing","map","item","idx","itemContainer","style","backgroundImage","backgroundRepeat","backgroundSize","ytPlayer","type","frameborder","details","subtitle","metaData","meta","metaItem","subMeta","subMetaLight","detailsFooter","footerItem","willWatch","icon","marginBottom","willMaybe","willDontWatch","xs","sm","md","key","root","flexGrow","minHeight","left","marginLeft","backgroundColor","boxSizing","zIndex","filter","textTransform","chip","margin","flexWrap","MenuProps","PaperProps","ITEM_HEIGHT","AppContainer","handleChange","event","setState","state","filters","target","name","value","handleDelete","filterType","getLastElofRow","el","nextElementSibling","previousElementSibling","offsetTop","previousSibling","children","length","scrollIntoView","inline","parentElement","isLoading","language","movies","genres","error","fGenres","fLanguages","this","Promise","resolve","reject","then","Set","Object","values","wrapper","header","navContainer","topWidget","Button","variant","widgetButton","FormControl","formControl","InputLabel","htmlFor","Select","multiple","selectRoot","onChange","input","Input","renderValue","join","FormControlLabel","control","Checkbox","checkboxRoot","checked","checkedIcon","optionLabel","datagrid","customFilters","index","Chip","size","label","deleteIcon","onDelete","listContainer","masterFilter","fg","fl","push","reduce","acc","mf","getFilteredData","Component","default","text","paddingTop","textOverflow","whiteSpace","secondary","overflow","fontsize","Boolean","window","location","hostname","match","createMuiTheme","themeName","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d029d11.chunk.js","sourcesContent":["export const LISTAPI = \"https://in.bookmyshow.com/serv/getData?cmd=GETTRAILERS&mtype=cs\"\nexport const IMAGEAPI = \"https://in.bmscdn.com/events/moviecard\"","import React, { useState , useRef} from 'react'\nimport ReactDOM from 'react-dom'\nimport clsx from 'clsx'\n\nimport { IMAGEAPI } from '../config'\nimport useOnScreen from '../utils/useOnScreen'\n\nimport { withStyles } from '@material-ui/core/styles'\nimport IconThumbUp from '@material-ui/icons/ThumbUp'\nimport IconPlayCircleOutline from '@material-ui/icons/PlayCircleOutline'\nimport { grey } from '@material-ui/core/colors';\n\nconst styles = theme => ({\n    container: {\n        position: 'relative',\n        width: '100%',   \n        opacity: 1,\n        [theme.breakpoints.down('md')]: {\n            height: 180,\n        },\n\n        [theme.breakpoints.down('sm')]: {\n            height: 230,\n        },\n\n        [theme.breakpoints.down('xs')]: {\n            height: 320,\n        },\n        \n        // [theme.breakpoints.down('xs')]: {\n        //     height: 300,\n        // },\n        //padding: 15px 10px 5px;\n    },\n    image: {\n        maxWidth: '100%',\n        borderStyle: 'none',\n\n        '&$selected': {\n            border: `2px solid ${theme.palette.primary.main}`\n        },\n        maxHeight: '100%',\n        maxWidth: '100%',\n        minHeight: 180\n    },\n    title: {\n        textAlign: 'left',\n        color: '#fff',\n        fontWeight: 500,\n        fontSize: 13,\n        marginTop: 10\n    },\n    selected: {},\n    release: {\n        background: theme.palette.primary.main,\n        color: '#fff',\n        borderRadius: '50%',\n        height: 16,\n        width: 16,\n        textAlign: 'center',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        fontSize: 10,\n        padding: 10,\n        top: '4.5%',\n        right: '6.5%',\n        position: 'absolute'\n    },\n    ratings: {\n        position: 'absolute',\n        bottom: '4%',\n        right: '4%',\n    },\n    imageContainer: {\n        position: 'relative',\n    },\n    itemDetails: {\n        width: '100%',\n        height: '50%',\n        background: '#fff'\n    },\n    layer: {\n        background: 'rgb(211,211,211)',\n        background: 'linear-gradient(0deg, rgba(0, 0, 0, 0.7) 35%, rgba(255, 255, 255, .1) 100%)',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: '70%',\n        position: 'absolute',\n        opacity: '.4'\n    },\n    thumb: {\n        display: 'flex',\n        fontSize: 12,\n        alignItems: 'center',\n        color: '#fff',  \n        '& > svg': {\n            color: theme.palette.primary.main,\n            marginRight: '5px',\n            fontSize: '15px'\n        }\n    },\n    votes: {\n        fontSize: 10,\n        color: '#fff',\n        textAlign: 'right'\n    },\n    playButton: {\n        position: 'absolute',\n        top: '42%',\n        right: '38%',\n        '& > svg': {\n            color: '#fff',\n            fontSize: 40\n        },\n        cursor: 'pointer'\n    }\n})\nconst monthShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nfunction MovieItem(props) {\n    const ref = useRef()\n    let { classes, data, onSelect, selectedData } = props\n    let src = process.env.PUBLIC_URL + '/grey.gif'\n    let thisdate = new Date(), givenDate = new Date(data['ShowDate']), element = null\n    let isThisYear = thisdate.getFullYear() - givenDate.getFullYear() === 0\n    const onScreen = useOnScreen(ref, '0px')\n    return (\n    <div className={classes.container} ref={e => element = e} id={data['EventCode']}>\n        <div className={classes.imageContainer}>\n            <div className={classes.release}>\n                {\n                    isThisYear ?\n                        <React.Fragment>\n                            <div>\n                                {givenDate.getDate()}\n                            </div>\n                            <div>\n                                {monthShort[givenDate.getMonth()]}\n                            </div>\n                        </React.Fragment>\n                        :\n                        <React.Fragment>\n                            <div>\n                                {monthShort[givenDate.getMonth()]}\n                            </div>\n                            <div>\n                                {givenDate.getFullYear()}\n                            </div>\n                        </React.Fragment>\n                        \n                }\n            </div>\n            <div className={classes.layer} />\n            <div className={classes.ratings}>\n                <div className={classes.thumb}>\n                    <IconThumbUp />\n                    {`${data['ratings']['wtsPerc']}%`}\n                </div>\n                <div className={classes.votes}>\n                    {`${data['csCount']} votes`}\n                </div>\n            </div>\n            <div className={classes.playButton}>\n                <IconPlayCircleOutline onClick={() => onSelect(data, ReactDOM.findDOMNode(element))}/>\n            </div>\n            <img\n                ref={ref}\n                src={onScreen ? `${IMAGEAPI}/${data.EventCode}.jpg` : src}\n                alt={data.EventImageCode}\n                className={clsx(classes.image, {[classes.selected]: selectedData['EventCode'] === data['EventCode']})}\n            />\n        </div>\n        <div className={classes.title}>\n            {data['EventTitle']}\n        </div>\n    </div>\n    )\n}\n\nexport default withStyles(styles)(MovieItem)","import { useState, useEffect } from 'react';\n\nexport default function useOnScreen(ref, rootMargin = '0px') {\n    // State and setter for storing whether element is visible\n    const [isIntersecting, setIntersecting] = useState(false);\n  \n    useEffect(() => {\n      const observer = new IntersectionObserver(\n        ([entry]) => {\n          // Update our state when observer callback fires\n          setIntersecting(entry.isIntersecting);\n        },\n        {\n          rootMargin\n        }\n      );\n      if (ref.current) {\n        observer.observe(ref.current);\n      }\n      return () => {\n        observer.unobserve(ref.current);\n      };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n  \n    return isIntersecting;\n  }","import React from 'react'\nimport clsx from 'clsx'\n\nimport Grid from '@material-ui/core/Grid'\n \nimport MovieItem from './MovieItem'\n\nimport { withStyles } from '@material-ui/core/styles'\n\nimport IconThumbUp from '@material-ui/icons/ThumbUp'\nimport IconCalendar from '@material-ui/icons/CalendarToday'\nimport IconHelpOutline from '@material-ui/icons/HelpOutline'\nimport IconThumbDown from '@material-ui/icons/ThumbDown'\nimport { IMAGEAPI } from '../config'\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    itemDetails: {\n        width: '100%',\n        height: 'calc(38vw - 75px)',\n        minHeight: '350px',\n        position: 'relative'\n    },\n    ytPlayer: {\n        width: '60%',\n        height: '100%',\n        marginRight: '25px',\n        top: 0,\n        left: 0,\n        position: 'absolute'\n    },\n    details: {\n        top: 0,\n        padding: '20px',    \n        position: 'absolute',\n        width: '35%',\n        marginLeft: '25px',\n        height: '100%',\n        right: 0,\n        color: \"#fff\",\n        backgroundColor: 'rgba(0,0,0,0.3)',\n        boxSizing: 'border-box'\n    },\n    itemContainer: {\n        zIndex: 0,\n        opacity: 0.3,\n        filter: 'blur(25px)',\n        height: '120%',\n        width: '100%'\n    },\n    title: {\n        fontSize: '16px',\n        fontWeight: 'bolder',\n        marginBottom: '7px'\n    },\n    subtitle: {\n        textTransform: 'uppercase',\n        fontSize: '13px',\n        fontWeight: 'lighter'\n    },\n    chip: {\n        display: 'inline-block',\n    },\n    meta: {\n        display: 'flex',\n        flexDirection: 'row',\n        margin: '5px 15px 0px 0px'\n    },\n    metaData: {\n        marginTop: '15px',\n        width: '50%',\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        justifyContent: 'space-between'\n    },\n    metaItem: {\n        color: '#fff',\n        marginLeft: '5px'\n    },\n    subMeta: {\n        fontWeight: 'bold',\n        fontSize: '11px'\n    },\n    detailsFooter: {\n        width:'100%',\n        position: 'absolute',\n        bottom: '10px',\n        left: 0,\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n    },\n    subMetaLight: {\n        fontWeight: 'lighter',\n        fontSize: '11px'\n    },\n    footerItem: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: 12,\n        margin: '10px',\n        flexDirection: 'column',\n        '&$willWatch': {\n            color: theme.palette.primary.main\n        },\n        '&$willMaybe': {\n            color: '#EE8833'\n        },\n        '&$willDontWatch': {\n            color: '#8B0000'\n        }\n    },\n    icon: {\n        marginBottom: 4,\n    },\n    willWatch: {},\n    willMaybe: {},\n    willDontWatch: {},\n})\nconst monthShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nconst Datagrid = React.forwardRef((props, ref) => {\n    let {\n        list,\n        onSelect,\n        lastElofRow,\n        classes,\n        selectedData = {}\n    } = props\n    let trailer = selectedData && selectedData[\"TrailerURL\"] || \"\", re = /(watch?v=)/\n    let videoId = trailer.split('v=')[1] || \"\"\n    var ampersandPosition = videoId.indexOf('&');\n    if(ampersandPosition != -1) {\n        videoId = videoId.substring(0, ampersandPosition);\n    }\n    let givenDate = new Date(selectedData['ShowDate'])\n    let videoSrc = `https://www.youtube.com/embed/${videoId}?autoplay=true\"&rel=0&modestbranding=1\" +\n    this.props.modest;`\n    return (\n        <Grid container justify=\"flex-start\" spacing={6}>\n            {\n                list.map((item, idx) => \n                    <React.Fragment>\n                        {lastElofRow != null && item['EventCode'] === lastElofRow &&\n                            <div className={classes.itemDetails}>\n                                <div className={classes.itemContainer} style={{\n                                    backgroundImage: `url(${IMAGEAPI}/${selectedData.EventCode}.jpg)`,\n                                    backgroundRepeat: 'no-repeat',\n                                    backgroundSize: 'cover'\n                                }} />\n                                <div className={classes.ytPlayer}>\n                                <iframe\n                                        className=\"player\"\n                                        type=\"text/html\"\n                                        width=\"100%\"\n                                        height=\"100%\"\n                                        src={videoSrc}\n                                        frameborder=\"0\"\n                                    />\n                                </div>\n                                <div className={classes.details}>\n                                    <div className={classes.title}>\n                                        {selectedData[\"EventTitle\"]}\n                                    </div>\n                                    <div className={classes.subtitle}>\n                                        {selectedData[\"EventLanguage\"]}\n                                    </div>\n                                    <div className={classes.metaData}>\n                                        <div className={classes.meta}>\n                                            <IconThumbUp />\n                                            <div className={classes.metaItem}>\n                                                <div className={classes.subMeta}>\n                                                    {`${selectedData['ratings']['wtsPerc']}%`}\n                                                </div>\n                                                <div className={classes.subMetaLight}>\n                                                    {`${selectedData['csCount']} votes`}\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div className={classes.meta}>\n                                            <IconCalendar />\n                                            <div className={classes.metaItem}>\n                                                <div className={classes.subMeta}>\n                                                    {`${givenDate.getDate()} ${monthShort[givenDate.getMonth()]}`}\n                                                </div>\n                                                <div className={classes.subMetaLight}>\n                                                    {givenDate.getFullYear()}\n                                                </div>\n                                            </div>\n                                        </div>\n                                </div>\n                                <div className={classes.detailsFooter}>\n                                    <div className={clsx(classes.footerItem, classes.willWatch)}>\n                                        <IconThumbUp fontSize='large' className={classes.icon}/>\n                                        <div style={{ marginBottom: '5px', fontSize: 10}}> \n                                           WILL WATCH\n                                        </div>\n                                        <div style={{ marginBottom: '7px', fontSize: 10}}>\n                                            ({selectedData['wtsCount']})\n                                        </div>\n                                    </div>\n                                    <div className={clsx(classes.footerItem, classes.willMaybe)}>\n                                        <IconHelpOutline fontSize=\"large\" className={classes.icon}/>\n                                        <div style={{ marginBottom: '5px', fontSize: 10}}> \n                                           MAYBE\n                                        </div>\n                                        <div style={{ marginBottom: '7px', fontSize: 10}}>\n                                            ({selectedData['maybe']})\n                                        </div>\n                                    </div>\n                                    <div className={clsx(classes.footerItem, classes.willDontWatch)}>\n                                        <IconThumbDown fontSize=\"large\" className={classes.icon}/>\n                                        <div style={{ marginBottom: '5px', fontSize: 10}}> \n                                            WONT WATCH\n                                        </div>\n                                        <div style={{ marginBottom: '7px', fontSize: 10}}>\n                                            ({selectedData['dwtsCount']})\n                                        </div>\n                                    </div>\n                                </div>\n                                </div>\n                            </div>   \n                        }\n                        <Grid item xs={6} sm={3} md={2} key={idx}>\n                            <MovieItem\n                                data={item}\n                                onSelect={onSelect}\n                                selectedData={selectedData}\n                            />\n                        </Grid>\n                    </React.Fragment>\n                   \n                )\n            }\n        </Grid>\n    )\n})\n\nexport default withStyles(styles)(Datagrid)","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\n/**Material ui components */\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';  \nimport Chip from '@material-ui/core/Chip';\n\n/**MUI ICons */\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport IconClear from '@material-ui/icons/Clear'\n\n/** Custom components*/\nimport Datagrid from './Datagrid'\n\nimport data from '../data.json'\n\n\n\nconst HEADER = 65\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP + 100,\n        width: 200,\n        padding: 10,\n        background: 'rgba(0, 0, 0, 0.8)'\n    },  \n  },\n};\n\nconst styles = theme => ({\n    title: {\n        color: '#fff',\n        display: 'flex',\n        alignItems: 'center',\n    },\n    wrapper: {\n        background: theme.palette.background.default,\n        color: theme.palette.text.default,\n        minHeight: '100%'\n    },\n    header: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        zIndex: 200,\n        margin: 0,\n        padding: 0,\n        height: HEADER,\n        display: 'flex',\n        alignItems: 'center',\n        background: '#000',\n        color: theme.palette.background.default,\n    },\n    navContainer: {\n        position: 'relative',\n        display: 'flex',\n        justifyContent: 'space-between',\n        width: '100%',\n        margin: '0 auto',\n        boxSizing: 'border-box',\n        display: '-webkit-box',\n        display: '-moz-box',\n        display: '-ms-flexbox',\n        display: '-webkit-flex',\n        display: 'flex',\n        '-webkit-align-items': 'baseline',\n        '-moz-align-items': 'baseline',\n        '-ms-align-items': 'baseline',\n        'align-items': 'baseline',\n        'padding': '0px 18px',\n    },\n    topWidget: {\n        display: 'flex',\n        flexDirection: 'row',\n        width: '50%'\n    },\n    datagrid: {\n        paddingTop: HEADER,\n        margin: 20,\n    },\n    listContainer: {\n        margin: '20px'\n    },\n    widgetButton: {\n        margin: '0px 10px',\n        flexWrap: 'nowrap',\n        fontWeight: 'bold',\n        textOverflow: 'elipsis',\n        fontSize: '0.567rem',\n        display: 'flex',\n        alignItems: 'center',\n        whiteSpace: 'nowrap',\n        color: theme.palette.text.secondary\n    },\n    right: {\n        justifyContent: 'flex-end'\n    },\n    left: {\n        justifyContent: 'flex-start'\n    },\n    selectRoot: {\n        width: '100px',\n        fontSize: 12,\n        whiteSpace: 'nowrap', \n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n    formControl: {\n        margin: '0px 15px',\n        '& > label': {\n            fontSize: 12\n        }\n    },\n    customFilters: {\n        display: 'flex',\n        flexDirection: 'row',\n        padding: '10px',\n        minHeight: 30,\n        alignItems: 'center'\n    },\n    chip: {\n        margin: theme.spacing(0.5),\n        color: '#8a8a8a',\n        padding: 8,\n        fontSize: '10px'\n    },\n    filter: {\n        fontSize: 12,\n        color: '#8a8a8a',\n        marginRight: '1.5em'\n    },\n    optionLabel: {\n        fontSize: 11,\n        marginLeft: -20\n    },\n    selected: {\n        color: theme.palette.primary.main\n    },\n    checkboxRoot: {\n        padding: '2px 10px'\n    },\n    input: {\n        fontsize: 10\n    }\n})\n\nclass AppContainer extends React.Component {\n    constructor(props) {\n        super()\n        this.state = {\n            isLoading: false,\n            data: {\n                language: [], movies: {}, genres: []\n            },\n            error: false,\n            filters: {\n                fGenres: [], fLanguages: []\n            },\n            lastElofRow: null\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            isLoading: true,\n        }, () => {\n            new Promise((resolve, reject) => {\n                return resolve(data)   \n            })\n            .then(([language = [], movies = {}]) => {\n                this.setState({\n                    data: {\n                        language, movies,\n                        /**Since genres are not provided in api */\n                        genres: [...new Set(Object.values(movies).map(item => item[\"EventGenre\"]))]\n                    },\n                    isLoading: false\n                })    \n            })\n        })\n    }\n\n    handleChange = event => {\n        this.setState(state => ({\n            filters: {\n                    ...state.filters,\n                    [event.target.name]: event.target.value\n                }\n            }) \n        )\n    }\n\n    handleDelete = (filterType, chip) => event => {\n        this.setState(state => ({\n            filters: {\n                    ...state.filters    ,\n                    [filterType]: state.filters[filterType].filter(item => item!=chip)\n                }\n            }) \n        )\n    }\n    getLastElofRow = (el, data) => {\n        /**Last element */\n        if(el.nextElementSibling === null || el.previousElementSibling === null) {\n            this.setState(state => ({\n                lastElofRow: el.children[0].id,\n                selectedData: data\n            })\n            )\n            return \n        }\n        if (el.previousElementSibling.offsetTop != el.offsetTop) {\n            if (el.previousSibling.children.length) {\n                    this.setState(state => ({\n                        lastElofRow: el.children[0].id,\n                        selectedData: data\n                    }), () => {\n                        el.previousSibling.scrollIntoView({ inline: 'center' })\n                    }\n                )\n            }   \n        } else {\n            this.getLastElofRow(el.previousElementSibling, data)\n        }\n    }\n\n\n    onSelect = (data, ref) => {\n        let element = ref.parentElement\n        this.getLastElofRow(element, data)\n    }\n\n    render() {\n        let {\n            classes\n        } = this.props\n        let {\n            filters: { fGenres, fLanguages },\n            data: { language, movies, genres }\n        } = this.state\n\n        let getFilteredData = () => {\n            let masterFilter = []\n            let fg = {}, fl = {}\n            fGenres.map(item => fg[item] = {})\n            fLanguages.map(item => fl[item] = {})\n            if(fLanguages.length) masterFilter.push([fl, \"EventLanguage\"])\n            if (fGenres.length) masterFilter.push([fg, \"EventGenre\"])\n            return masterFilter.reduce((acc, mf) => {\n                return acc.filter(item => {\n                    return item[mf[1]] in mf[0]\n                })\n            }, Object.values(movies))\n        }\n\n        return (\n            <div className={ classes.wrapper }>\n                <header className={classes.header}>\n                    <div className={classes.navContainer}>\n                        <div className={clsx(classes.topWidget, classes.left)}>  \n                            <div className={classes.title}>\n                                Movie Trailers\n                            </div>\n                            <Button variant=\"contained\" color=\"primary\" style={{color: '#fff'}} className={classes.widgetButton}>Coming Soon</Button>\n                            <Button variant=\"contained\" color=\"secondary\" className={classes.widgetButton}>Now Showing</Button>\n                        </div>\n                        <div className={clsx(classes.topWidget, classes.right)}>\n                            <FormControl className={classes.formControl}>\n                                <InputLabel htmlFor=\"select-multiple-checkbox\">Language</InputLabel>\n                                <Select\n                                    multiple\n                                    classes={{\n                                        root: classes.selectRoot   \n                                    }}\n                                    name=\"fLanguages\"    \n                                    value={fLanguages}\n                                    onChange={this.handleChange}\n                                    input={<Input id=\"select-multiple-checkbox\" />}\n                                    renderValue={selected => selected.join(', ')}\n                                    MenuProps={MenuProps}\n                                >\n                                    {language.map(name => (\n                                        <div key={name} value={name}>\n                                           <FormControlLabel\n                                              control={\n                                                <Checkbox\n                                                    classes={{\n                                                        root: classes.checkboxRoot        \n                                                    }}          \n                                                  checked={fLanguages.indexOf(name) > -1}        \n                                                  icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\n                                                      checkedIcon={\n                                                          <CheckBoxIcon\n                                                              color=\"primary\"\n                                                              fontSize=\"small\"\n                                                          />}\n                                                  value=\"checkedI\"\n                                                />\n                                              }\n                                          />\n                                          <span className={clsx(classes.optionLabel, {\n                                              [classes.selected]: fLanguages.indexOf(name) > -1\n                                          })}>{name}</span>\n                                      </div>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                            <FormControl className={classes.formControl}>\n                                <InputLabel htmlFor=\"select-multiple-checkbox\">Genres</InputLabel>\n                                <Select\n                                    multiple\n                                    classes={{\n                                        root: classes.selectRoot   \n                                    }}\n                                    name=\"fGenres\"    \n                                    value={fGenres}\n                                    onChange={this.handleChange} \n                                    input={<Input id=\"select-multiple-checkbox\" classes={{ root: classes.input }}/>}\n                                    renderValue={selected => selected.join(', ')}\n                                    MenuProps={MenuProps}\n                                >\n                                    {genres.map(name => (\n                                        <div key={name} value={name}>\n                                             <FormControlLabel\n                                                control={\n                                                    <Checkbox\n                                                    classes={{\n                                                        root: classes.checkboxRoot        \n                                                    }} \n                                                    checked={fGenres.indexOf(name) > -1}        \n                                                    icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\n                                                        checkedIcon={\n                                                            <CheckBoxIcon\n                                                                color=\"primary\"\n                                                                fontSize=\"small\"\n                                                            />}\n                                                    value=\"checkedI\"\n                                                />\n                                                }\n                                            />\n                                            <span className={clsx(classes.optionLabel, {\n                                                [classes.selected]: fGenres.indexOf(name) > -1\n                                            })}>{name}</span>\n                                        </div>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </div>\n                    </div>\n                </header>\n                <div className={classes.datagrid}>\n                    <div className={classes.customFilters}>\n                        {\n                            (fLanguages.length || fGenres.length) ? \n                                <div className={classes.filter}>\n                                    Applied Filters: \n                                </div>\n                                : null\n                        }\n                        {\n                            fLanguages.map((chip, index) => \n                            <Chip\n                                size=\"small\"\n                                key={index}\n                                label={chip}\n                                    deleteIcon={<IconClear style={{color: '#8a8a8a', fontSize: '18px', marginLeft: '2px'}}/>}\n                                onDelete={this.handleDelete(\"fLanguages\", chip)}\n                                className={classes.chip}\n                                color=\"secondary\"\n                                />\n                            )    \n                        }\n                        {\n                            fGenres.map((chip, index) => \n                            <Chip\n                                size=\"small\"\n                                key={index}\n                                label={chip}\n                                deleteIcon={<IconClear style={{color: '#8a8a8a', fontSize: '20px', marginLeft: '5px'}}/>}\n                                onDelete={this.handleDelete(\"fGenres\", chip)}\n                                className={classes.chip}\n                                color=\"secondary\"\n                                />\n                            )    \n                        }\n                    </div>\n                    <div className={classes.listContainer}>\n                        <Datagrid\n                            list={getFilteredData()}\n                            onSelect={this.onSelect}\n                            selectedData = {this.state.selectedData}\n                            lastElofRow={this.state.lastElofRow}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default withStyles(styles)(AppContainer)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst palette = { \n    type: 'dark',\n    background: {\n        default: '#0f171e'\n    },\n    text: {\n        primary: '#fff',\n        secondary: '#CCCCCC',\n        selected: '#fff'\n    },\n    primary: { \n        main: '#49BA8E',  \n    },\n    secondary: {\n        main: '#333333'\n    }\n}\n\nconst themeName = 'Lima Razzmatazz Pronghorn';\n\nexport default createMuiTheme({ palette, themeName });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Container from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from '@material-ui/styles';\nimport theme from './theme'\n\n\nconst App = () => (\n    <React.Fragment>\n        <ThemeProvider theme={theme}>\n            <Container/>\n        </ThemeProvider>\n    </React.Fragment>\n)\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}